#!/bin/bash

#shellcheck disable=SC2155
#shellcheck disable=SC1091
#shellcheck disable=SC2059

source "${__CUSTOM_GIT_UTIL}"/__assertgitrepo
source "${__CUSTOM_GIT_UTIL}"/__ask
source "${__CUSTOM_GIT_UTIL}"/fzf_headers/gcommit/__type_header
source "${__CUSTOM_GIT_UTIL}"/fzf_headers/gcommit/__scope_header
source "${__CUSTOM_GIT_UTIL}"/fzf_headers/gcommit/__new_scope_header
source "${__CUSTOM_GIT_UTIL}"/fzf_headers/gcommit/__description_header
source "${__CUSTOM_CONSOLE_UTIL}"/__print_info
source "${__CUSTOM_CONSOLE_UTIL}"/__print_as
source "${__CUSTOM_CONSOLE_UTIL}"/__println_as
source "${__CUSTOM_CONSOLE_UTIL}"/__common

__assertgitrepo

REPO_PATH="$(git rev-parse --show-toplevel)"
COMMIT_SCOPE_FILE="${REPO_PATH}/.gitcommitscopes"
ADD_NEW_SCOPE="ADD NEW SCOPE"
# DELETE_SCOPES="DELETE SCOPE(s) FROM THE LIST"

function main() {

    local numStagedFiles=$(git status --short | grep "^[A-Z]" -c)
    if [[ $numStagedFiles -eq 0 ]]; then
        local numUnstagedFiles=$(git status --short | grep "^.[A-Z?]" -c)
        if [[ $numUnstagedFiles -eq 0 ]]; then
            __print_info "Nothing to commit"
            return
        fi
        gstatus

        local commitAll="$(__ask "Stage all the files?")"
        if [[ "${commitAll}" == "yes" ]]; then
            git add -A
        else
            echo
            __print_info "Stage the files to commit"
            return
        fi
    fi
    gstatus

    local commitMessage=""

    # get commit type
    print_commit_msg "${commitMessage}"
    local isBreakingChange=false
    local commitType="$(get_commit_type "${isBreakingChange}")"
    if [[ "${commitType}" == "BREAKING-CHANGE" ]]; then
        print_commit_msg "${commitMessage}"
        isBreakingChange=true
        commitType="$(get_commit_type "${isBreakingChange}")"
    fi
    [ -z "${commitType}" ] && {
        __print_info "commit type is required, for more details visit https://conventionalcommits.org"
        return
    }
    commitMessage="${commitType}"

    # get commit scope
    local commitScope=""
    while [ -z "${commitScope}" ]; do
        print_commit_msg "${commitMessage}"
        commitScope="$(get_commit_scope "${isBreakingChange}")"
        [ -z "${commitScope}" ] && break

        if [[ "${commitScope}" == "${ADD_NEW_SCOPE}" ]]; then
            print_commit_msg "${commitMessage}"
            commitScope="$(get_new_scope)"
        fi
    done
    [ -n "${commitScope}" ] && commitMessage="${commitMessage}(${commitScope})"

    [ "${isBreakingChange}" == "true" ] && commitMessage="${commitMessage}!"

    commitMessage="${commitMessage}: "

    # get commit description
    print_commit_msg "${commitMessage}"
    local commitDescription="$(get_commit_description "${isBreakingChange}")"
    [ -z "${commitDescription}" ] && {
        gstatus
        __print_info "commit description is required, for more details visit https://conventionalcommits.org"
        return
    }
    commitMessage="${commitMessage}${commitDescription}"

    clear
    git commit -m "${commitMessage}"
    git log

    echo
    echo "To add the commit body/footer or edit the commit message, do "
    echo -e "    $ git commit --amend\n"
}

# Usage: get_commit_type true
# $1 bool: isBreakingChange
function get_commit_type() {

    local isBreakingChange="${1}"

    local commitTypes=("feat" "fix" "perf" "refactor" "test" "style" "docs" "build" "ci" "cd" "chore" "revert")

    [ "${isBreakingChange}" == "false" ] && {
        commitTypes=("${commitTypes[@]}" "BREAKING-CHANGE")
    }

    local GCOMMIT_TYPE_HEADER="$(__type_header)"

    local commitType="$(printf "%s\n" "${commitTypes[@]}" |\
                        fzf --height=70% --preview-window :35%\
                            --info=hidden\
                            --header "${GCOMMIT_TYPE_HEADER}"\
                            --bind '?:toggle-preview'\
                            --preview "source $__CUSTOM_GIT_UTIL/fzf_previews/gcommit/__type_preview;
                                __type_preview {} ${isBreakingChange}")"

    echo "${commitType}"
}

function get_commit_scope() {

    sort_commit_scope_file

    local isBreakingChange="${1}"

    local commitScopes=("${ADD_NEW_SCOPE}")
    local commitScope=""
    if [[ -f "${COMMIT_SCOPE_FILE}" ]]; then
        while IFS= read -r commitScope; do
            commitScopes=("${commitScopes[@]}" "${commitScope}")
        done < "${COMMIT_SCOPE_FILE}"
    fi

    local GCOMMIT_SCOPE_HEADER="$(__scope_header)"
    commitScope="$(printf "%s\n" "${commitScopes[@]}" |\
                    fzf --height=65% --preview-window :35%\
                        --header "${GCOMMIT_SCOPE_HEADER}"\
                        --bind '?:toggle-preview'\
                        --preview "source $__CUSTOM_GIT_UTIL/fzf_previews/gcommit/__scope_preview;
                            __scope_preview ${isBreakingChange}")"

    echo "${commitScope}"
}

function get_new_scope() {

    local GCOMMIT_SCOPE_HEADER="$(__new_scope_header)"
    local commitScope="$(echo "" | grep "x" |\
                    fzf --height 1%\
                        --info=hidden\
                        --bind 'enter:print-query'\
                        --header "${GCOMMIT_SCOPE_HEADER}")"

    [ -z "${commitScope}" ] && {
        echo ""
        return
    }

    if [[ ! -f "${COMMIT_SCOPE_FILE}" ]]; then
        echo "${commitScope}" > "${COMMIT_SCOPE_FILE}"  # creates the file
    else
        # check if the scope is already present in the file
        ! grep -Fxq "${commitScope}" "${COMMIT_SCOPE_FILE}" && {
            echo "${commitScope}" >> "${COMMIT_SCOPE_FILE}" # appends to the file
        }
    fi
    sort_commit_scope_file

    echo "${commitScope}"
}

function sort_commit_scope_file() {

    [ ! -f "${COMMIT_SCOPE_FILE}" ] && return
    sort "${COMMIT_SCOPE_FILE}" > "${COMMIT_SCOPE_FILE}_sorted"
    mv "${COMMIT_SCOPE_FILE}_sorted" "${COMMIT_SCOPE_FILE}"
}

function get_commit_description() {

    local isBreakingChange="${1}"

    local GCOMMIT_DESCRIPTION_HEADER="$(__description_header)"
    local commitDescription="$(echo "" | grep "x" |\
                                fzf --height 40%\
                                    --info=hidden\
                                    --bind 'enter:print-query'\
                                    --header "${GCOMMIT_DESCRIPTION_HEADER}"\
                                    --bind '?:toggle-preview'\
                                    --preview "source $__CUSTOM_GIT_UTIL/fzf_previews/gcommit/__description_preview;
                                        __description_preview ${isBreakingChange}")"
    echo "${commitDescription}"
}

function print_commit_msg() {
    __print_as "bold" "reverse" "commit message:-"
    echo -n " ${1}"
}

main
